!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
cJSON	cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddFalseToObject	cJSON.h	/^#define cJSON_AddFalseToObject(/;"	d
cJSON_AddItemReferenceToArray	cJSON.c	/^	cJSON_AddItemReferenceToArray (cJSON * array, cJSON * item)$/;"	f
cJSON_AddItemReferenceToObject	cJSON.c	/^	cJSON_AddItemReferenceToObject (cJSON * object, const char *string,$/;"	f
cJSON_AddItemToArray	cJSON.c	/^	cJSON_AddItemToArray (cJSON * array, cJSON * item)$/;"	f
cJSON_AddItemToObject	cJSON.c	/^	cJSON_AddItemToObject (cJSON * object, const char *string, cJSON * item)$/;"	f
cJSON_AddNullToObject	cJSON.h	/^#define cJSON_AddNullToObject(/;"	d
cJSON_AddNumberToObject	cJSON.h	/^#define cJSON_AddNumberToObject(/;"	d
cJSON_AddStringToObject	cJSON.h	/^#define cJSON_AddStringToObject(/;"	d
cJSON_AddTrueToObject	cJSON.h	/^#define cJSON_AddTrueToObject(/;"	d
cJSON_Array	cJSON.h	/^#define cJSON_Array /;"	d
cJSON_CreateArray	cJSON.c	/^	cJSON_CreateArray ()$/;"	f
cJSON_CreateBool	cJSON.c	/^	cJSON_CreateBool (int b)$/;"	f
cJSON_CreateDoubleArray	cJSON.c	/^	cJSON_CreateDoubleArray (double *numbers, int count)$/;"	f
cJSON_CreateFalse	cJSON.c	/^	cJSON_CreateFalse ()$/;"	f
cJSON_CreateFloatArray	cJSON.c	/^	cJSON_CreateFloatArray (float *numbers, int count)$/;"	f
cJSON_CreateIntArray	cJSON.c	/^	cJSON_CreateIntArray (int *numbers, int count)$/;"	f
cJSON_CreateNull	cJSON.c	/^	cJSON_CreateNull ()$/;"	f
cJSON_CreateNumber	cJSON.c	/^	cJSON_CreateNumber (double num)$/;"	f
cJSON_CreateObject	cJSON.c	/^	cJSON_CreateObject ()$/;"	f
cJSON_CreateString	cJSON.c	/^	cJSON_CreateString (const char *string)$/;"	f
cJSON_CreateStringArray	cJSON.c	/^	cJSON_CreateStringArray (const char **strings, int count)$/;"	f
cJSON_CreateTrue	cJSON.c	/^	cJSON_CreateTrue ()$/;"	f
cJSON_Delete	cJSON.c	/^	cJSON_Delete (cJSON * c)$/;"	f
cJSON_DeleteItemFromArray	cJSON.c	/^	cJSON_DeleteItemFromArray (cJSON * array, int which)$/;"	f
cJSON_DeleteItemFromObject	cJSON.c	/^	cJSON_DeleteItemFromObject (cJSON * object, const char *string)$/;"	f
cJSON_DetachItemFromArray	cJSON.c	/^	cJSON_DetachItemFromArray (cJSON * array, int which)$/;"	f
cJSON_DetachItemFromObject	cJSON.c	/^	cJSON_DetachItemFromObject (cJSON * object, const char *string)$/;"	f
cJSON_False	cJSON.h	/^#define cJSON_False /;"	d
cJSON_GetArrayItem	cJSON.c	/^	cJSON_GetArrayItem (cJSON * array, int item)$/;"	f
cJSON_GetArraySize	cJSON.c	/^	cJSON_GetArraySize (cJSON * array)$/;"	f
cJSON_GetErrorPtr	cJSON.c	/^	cJSON_GetErrorPtr ()$/;"	f
cJSON_GetObjectItem	cJSON.c	/^	cJSON_GetObjectItem (cJSON * object, const char *string)$/;"	f
cJSON_Hooks	cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	cJSON.c	/^	cJSON_InitHooks (cJSON_Hooks * hooks)$/;"	f
cJSON_IsReference	cJSON.h	/^#define cJSON_IsReference /;"	d
cJSON_NULL	cJSON.h	/^#define cJSON_NULL /;"	d
cJSON_New_Item	cJSON.c	/^	cJSON_New_Item ()$/;"	f	file:
cJSON_Number	cJSON.h	/^#define cJSON_Number /;"	d
cJSON_Object	cJSON.h	/^#define cJSON_Object /;"	d
cJSON_Parse	cJSON.c	/^	cJSON_Parse (const char *value)$/;"	f
cJSON_Print	cJSON.c	/^	cJSON_Print (cJSON * item)$/;"	f
cJSON_PrintUnformatted	cJSON.c	/^	cJSON_PrintUnformatted (cJSON * item)$/;"	f
cJSON_ReplaceItemInArray	cJSON.c	/^	cJSON_ReplaceItemInArray (cJSON * array, int which, cJSON * newitem)$/;"	f
cJSON_ReplaceItemInObject	cJSON.c	/^	cJSON_ReplaceItemInObject (cJSON * object, const char *string,$/;"	f
cJSON_String	cJSON.h	/^#define cJSON_String /;"	d
cJSON_True	cJSON.h	/^#define cJSON_True /;"	d
cJSON__h	cJSON.h	/^#define cJSON__h$/;"	d
cJSON_free	cJSON.c	/^static void (*cJSON_free) (void *ptr) = free;$/;"	v	file:
cJSON_malloc	cJSON.c	/^static void *(*cJSON_malloc) (size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	cJSON.c	/^	cJSON_strcasecmp (const char *s1, const char *s2)$/;"	f	file:
cJSON_strdup	cJSON.c	/^	cJSON_strdup (const char *str)$/;"	f	file:
child	cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
create_reference	cJSON.c	/^	create_reference (cJSON * item)$/;"	f	file:
ep	cJSON.c	/^static const char *ep;$/;"	v	file:
firstByteMark	cJSON.c	/^static const unsigned char firstByteMark[7] =$/;"	v	file:
free_fn	cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
main	task2.c	/^int main(int argc, char ** argv)$/;"	f
malloc_fn	cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
next	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
parse_array	cJSON.c	/^	parse_array (cJSON * item, const char *value)$/;"	f	file:
parse_number	cJSON.c	/^	parse_number (cJSON * item, const char *num)$/;"	f	file:
parse_object	cJSON.c	/^	parse_object (cJSON * item, const char *value)$/;"	f	file:
parse_string	cJSON.c	/^	parse_string (cJSON * item, const char *str)$/;"	f	file:
parse_value	cJSON.c	/^	parse_value (cJSON * item, const char *value)$/;"	f	file:
prev	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
print_array	cJSON.c	/^	print_array (cJSON * item, int depth, int fmt)$/;"	f	file:
print_number	cJSON.c	/^	print_number (cJSON * item)$/;"	f	file:
print_object	cJSON.c	/^	print_object (cJSON * item, int depth, int fmt)$/;"	f	file:
print_string	cJSON.c	/^	print_string (cJSON * item)$/;"	f	file:
print_string_ptr	cJSON.c	/^	print_string_ptr (const char *str)$/;"	f	file:
print_value	cJSON.c	/^	print_value (cJSON * item, int depth, int fmt)$/;"	f	file:
skip	cJSON.c	/^	skip (const char *in)$/;"	f	file:
string	cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
suffix_object	cJSON.c	/^	suffix_object (cJSON * prev, cJSON * item)$/;"	f	file:
task2	task2.c	/^void task2()$/;"	f
type	cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
valuedouble	cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
